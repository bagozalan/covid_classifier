# -*- coding: utf-8 -*-
"""gepitanulas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IgrU13pI9fmjjNmDxaV7oSBMD9juGJB0
"""

import pandas as pd
import numpy as np
data=pd.read_csv('Covid Data.csv')
data.info()
df=data.copy()

df.hist(bins = 10 , figsize= (14,14))
plt.show()

df['DATE_DIED'].value_counts()

df.DATE_DIED[df['DATE_DIED'] != '9999-99-99'] = 1
df.DATE_DIED[df['DATE_DIED'] == '9999-99-99'] = 0

df['DATE_DIED'].value_counts()

df['SEX'].value_counts()

df.groupby(['SEX', 'PREGNANT'])['PREGNANT'].count()

df['PREGNANT'].replace({97 : 0, 98 : np.nan}, inplace = True)

df.groupby(['SEX', 'PREGNANT'])['PREGNANT'].count()

df['USMER'].replace(2.0, 0, inplace=True)
df['SEX'].replace(2.0, 0, inplace=True)
df['PATIENT_TYPE'].replace(2.0, 0, inplace=True)
df['INTUBED'].replace(2.0, 0, inplace=True)
df['PNEUMONIA'].replace(2.0, 0, inplace=True)
df['PREGNANT'].replace(2.0, 0, inplace=True)
df['DIABETES'].replace(2.0, 0, inplace=True)
df['COPD'].replace(2.0, 0, inplace=True)
df['ASTHMA'].replace(2.0, 0, inplace=True)
df['INMSUPR'].replace(2.0, 0, inplace=True)
df['HIPERTENSION'].replace(2.0, 0, inplace=True)
df['OTHER_DISEASE'].replace(2.0, 0, inplace=True)
df['CARDIOVASCULAR'].replace(2.0, 0, inplace=True)
df['OBESITY'].replace(2.0, 0, inplace=True)
df['RENAL_CHRONIC'].replace(2.0, 0, inplace=True)
df['TOBACCO'].replace(2.0, 0, inplace=True)
df['ICU'].replace(2.0, 0, inplace=True)

df['TOBACCO'].value_counts()

df.replace([97,98, 99], np.nan, inplace = True)

df['TOBACCO'].value_counts()

df.isnull().sum()

df.drop(columns=["INTUBED","ICU"], inplace=True)

df.isnull().sum()

fill_list = df['PNEUMONIA'].dropna()
df['PNEUMONIAe'] = df['PNEUMONIA'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['AGE'].dropna()
df['AGE'] = df['AGE'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['PREGNANT'].dropna()
df['PREGNANT'] = df['PREGNANT'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['DIABETES'].dropna()
df['DIABETES'] = df['DIABETES'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['COPD'].dropna()
df['COPD'] = df['COPD'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['ASTHMA'].dropna()
df['ASTHMA'] = df['ASTHMA'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['INMSUPR'].dropna()
df['INMSUPR'] = df['INMSUPR'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['HIPERTENSION'].dropna()
df['HIPERTENSION'] = df['HIPERTENSION'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['OTHER_DISEASE'].dropna()
df['OTHER_DISEASE'] = df['OTHER_DISEASE'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['CARDIOVASCULAR'].dropna()
df['CARDIOVASCULAR'] = df['CARDIOVASCULAR'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['OBESITY'].dropna()
df['OBESITY'] = df['OBESITY'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['RENAL_CHRONIC'].dropna()
df['RENAL_CHRONIC'] = df['RENAL_CHRONIC'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

fill_list = df['TOBACCO'].dropna()
df['TOBACCO'] = df['TOBACCO'].fillna(pd.Series(np.random.choice(fill_list , size = len(df.index))))

df.dropna(subset=['PNEUMONIA'],inplace=True)

df.isnull().sum()

x=df.drop('DATE_DIED',axis=1).values
y=df['DATE_DIED'].values

from imblearn.under_sampling import RandomUnderSampler
X_under, y_under = RandomUnderSampler().fit_resample(x,y)
print(X_under.shape, y_under.shape)

from sklearn.model_selection import train_test_split
X_train , X_test , Y_train , Y_test = train_test_split(X_under, y_under , test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification

model = RandomForestClassifier(n_estimators=100, random_state=69, max_features=3)
model.fit(X_train, Y_train)
print('Pontosság:',model.score(X_test, Y_test))

from sklearn.tree import DecisionTreeClassifier
model2 = DecisionTreeClassifier(criterion = 'entropy',max_depth=3, random_state = 69)
model2.fit(X_train, Y_train)
print('Pontosság:',model2.score(X_test, Y_test))

from sklearn.ensemble import BaggingClassifier
# Bagging-es DCT tanítás és értékelés
model3 = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=100, random_state=69)
model3.fit(X_train, Y_train)
print('Pontosság:',model.score(X_test, Y_test)) # Igazából a model.score() ugyanazt adja ki, mint az accuracy_score

